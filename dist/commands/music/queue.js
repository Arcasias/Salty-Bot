import Command from "../../classes/Command";
import { EmptyObject, IncorrectValue, MissingArg, OutOfRange, } from "../../classes/Exception";
import Guild from "../../classes/Guild";
import Salty from "../../classes/Salty";
import { formatDuration } from "../../utils";
const DISPLAY_LIMIT = 25;
export default new Command({
    name: "queue",
    keys: ["playlist", "q"],
    help: [
        {
            argument: null,
            effect: "Shows the current queue. To add something to it, refer to the **play** command",
        },
        {
            argument: "remove ***song number***, ***song number***, ...",
            effect: 'Deletes one or several songs from the queue. Numbers must be separated with ","',
        },
        {
            argument: "clear",
            effect: "Clears the queue",
        },
    ],
    visibility: "public",
    async action(msg, args) {
        const { playlist } = Guild.get(msg.guild.id);
        if (args[0] && Salty.getList("delete").includes(args[0])) {
            if (!playlist.queue[0]) {
                throw new EmptyObject("queue");
            }
            if (!args[1]) {
                throw new MissingArg("song number");
            }
            else {
                args.shift();
            }
            const songs = args.join("").split(",");
            const songIds = Array.isArray(songs)
                ? [...new Set(...songs)]
                : [songs];
            // Checks for validity
            for (let i = 0; i < songIds.length; i++) {
                if (isNaN(songIds[i])) {
                    throw new IncorrectValue("song", "number");
                }
                songIds[i]--; // converting human logical index to array index
                if (playlist.queue.length <= songIds[i] || songIds[i] < 0) {
                    throw new OutOfRange(songIds[i]);
                }
            }
            const removed = playlist.remove(...songs);
            const message = Array.isArray(songs)
                ? `Songs n°${songs.map((s) => s + 1)} removed from the queue`
                : `Song n°${songs[0] + 1} - **${removed[0].title}** removed from the queue`;
            Salty.success(msg, message);
        }
        else if (args[0] && Salty.getList("clear").includes(args[0])) {
            playlist.empty();
            Salty.success(msg, "queue cleared");
        }
        else {
            if (!playlist.queue[0]) {
                throw new EmptyObject("queue");
            }
            // Returns an embed message displaying all songs
            let totalDuration = 0;
            const options = {
                title: "current queue",
                fields: [],
                footer: `repeat: ${playlist.repeat}`,
            };
            options.fields = playlist.queue
                .slice(0, DISPLAY_LIMIT)
                .map(({ duration, title, url }, i) => {
                const name = `${i + 1}) ${title}`;
                const description = `${formatDuration(duration)} - [Open in browser](${url})`;
                totalDuration += duration;
                return {
                    title: playlist.pointer === i ? "> " + name : name,
                    description,
                };
            });
            options.description = `total duration: ${formatDuration(totalDuration)}`;
            if (playlist.connection) {
                const playlistTitle = playlist.playing.title;
                const title = 20 < playlistTitle.length
                    ? playlistTitle.slice(0, 20) + "..."
                    : playlistTitle;
                options.description += ". Currently playing: " + title;
            }
            Salty.embed(msg, options);
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvbXVzaWMvcXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sdUJBQXVCLENBQUM7QUFDNUMsT0FBTyxFQUNILFdBQVcsRUFDWCxjQUFjLEVBQ2QsVUFBVSxFQUNWLFVBQVUsR0FDYixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFN0MsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBRXpCLGVBQWUsSUFBSSxPQUFPLENBQUM7SUFDdkIsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDO0lBQ3ZCLElBQUksRUFBRTtRQUNGO1lBQ0ksUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQ0YsZ0ZBQWdGO1NBQ3ZGO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsa0RBQWtEO1lBQzVELE1BQU0sRUFDRixpRkFBaUY7U0FDeEY7UUFDRDtZQUNJLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLE1BQU0sRUFBRSxrQkFBa0I7U0FDN0I7S0FDSjtJQUNELFVBQVUsRUFBRSxRQUFRO0lBQ3BCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDbEIsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU3QyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0RCxJ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LFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQztnQkFDbEMsTUFBTSxXQUFXLEdBQUcsR0FBRyxjQUFjLENBQ2pDLFFBQVEsQ0FDWCx3QkFBd0IsR0FBRyxHQUFHLENBQUM7Z0JBQ2hDLGFBQWEsSUFBSSxRQUFRLENBQUM7Z0JBQzFCLE9BQU87b0JBQ0gsS0FBSyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUNsRCxXQUFXO2lCQUNkLENBQUM7WUFDTixDQUFDLENBQUMsQ0FBQztZQUNQLE9BQU8sQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLGNBQWMsQ0FDbkQsYUFBYSxDQUNoQixFQUFFLENBQUM7WUFDSixJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JCLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUM3QyxNQUFNLEtBQUssR0FDUCxFQUFFLEdBQUcsYUFBYSxDQUFDLE1BQU07b0JBQ3JCLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLO29CQUNwQyxDQUFDLENBQUMsYUFBYSxDQUFDO2dCQUN4QixPQUFPLENBQUMsV0FBVyxJQUFJLHVCQUF1QixHQUFHLEtBQUssQ0FBQzthQUMxRDtZQUNELEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzdCO0lBQ0wsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tYW5kIGZyb20gXCIuLi8uLi9jbGFzc2VzL0NvbW1hbmRcIjtcbmltcG9ydCB7XG4gICAgRW1wdHlPYmplY3QsXG4gICAgSW5jb3JyZWN0VmFsdWUsXG4gICAgTWlzc2luZ0FyZyxcbiAgICBPdXRPZlJhbmdlLFxufSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9FeGNlcHRpb25cIjtcbmltcG9ydCBHdWlsZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9HdWlsZFwiO1xuaW1wb3J0IFNhbHR5IGZyb20gXCIuLi8uLi9jbGFzc2VzL1NhbHR5XCI7XG5pbXBvcnQgeyBmb3JtYXREdXJhdGlvbiB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5jb25zdCBESVNQTEFZX0xJTUlUID0gMjU7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb21tYW5kKHtcbiAgICBuYW1lOiBcInF1ZXVlXCIsXG4gICAga2V5czogW1wicGxheWxpc3RcIiwgXCJxXCJdLFxuICAgIGhlbHA6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBlZmZlY3Q6XG4gICAgICAgICAgICAgICAgXCJTaG93cyB0aGUgY3VycmVudCBxdWV1ZS4gVG8gYWRkIHNvbWV0aGluZyB0byBpdCwgcmVmZXIgdG8gdGhlICoqcGxheSoqIGNvbW1hbmRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwicmVtb3ZlICoqKnNvbmcgbnVtYmVyKioqLCAqKipzb25nIG51bWJlcioqKiwgLi4uXCIsXG4gICAgICAgICAgICBlZmZlY3Q6XG4gICAgICAgICAgICAgICAgJ0RlbGV0ZXMgb25lIG9yIHNldmVyYWwgc29uZ3MgZnJvbSB0aGUgcXVldWUuIE51bWJlcnMgbXVzdCBiZSBzZXBhcmF0ZWQgd2l0aCBcIixcIicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcImNsZWFyXCIsXG4gICAgICAgICAgICBlZmZlY3Q6IFwiQ2xlYXJzIHRoZSBxdWV1ZVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdmlzaWJpbGl0eTogXCJwdWJsaWNcIixcbiAgICBhc3luYyBhY3Rpb24obXNnLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHsgcGxheWxpc3QgfSA9IEd1aWxkLmdldChtc2cuZ3VpbGQuaWQpO1xuXG4gICAgICAgIGlmIChhcmdzWzBdICYmIFNhbHR5LmdldExpc3QoXCJkZWxldGVcIikuaW5jbHVkZXMoYXJnc1swXSkpIHtcbiAgICAgICAgICAgIGlmICghcGxheWxpc3QucXVldWVbMF0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRW1wdHlPYmplY3QoXCJxdWV1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYXJnc1sxXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nQXJnKFwic29uZyBudW1iZXJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNvbmdzID0gYXJncy5qb2luKFwiXCIpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHNvbmdJZHMgPSBBcnJheS5pc0FycmF5KHNvbmdzKVxuICAgICAgICAgICAgICAgID8gWy4uLm5ldyBTZXQoLi4uc29uZ3MpXVxuICAgICAgICAgICAgICAgIDogW3NvbmdzXTtcblxuICAgICAgICAgICAgLy8gQ2hlY2tzIGZvciB2YWxpZGl0eVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb25nSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHNvbmdJZHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbmNvcnJlY3RWYWx1ZShcInNvbmdcIiwgXCJudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNvbmdJZHNbaV0tLTsgLy8gY29udmVydGluZyBodW1hbiBsb2dpY2FsIGluZGV4IHRvIGFycmF5IGluZGV4XG4gICAgICAgICAgICAgICAgaWYgKHBsYXlsaXN0LnF1ZXVlLmxlbmd0aCA8PSBzb25nSWRzW2ldIHx8IHNvbmdJZHNbaV0gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPdXRPZlJhbmdlKHNvbmdJZHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IHBsYXlsaXN0LnJlbW92ZSguLi5zb25ncyk7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gQXJyYXkuaXNBcnJheShzb25ncylcbiAgICAgICAgICAgICAgICA/IGBTb25ncyBuwrAke3NvbmdzLm1hcCgocykgPT4gcyArIDEpfSByZW1vdmVkIGZyb20gdGhlIHF1ZXVlYFxuICAgICAgICAgICAgICAgIDogYFNvbmcgbsKwJHtzb25nc1swXSArIDF9IC0gKioke1xuICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRbMF0udGl0bGVcbiAgICAgICAgICAgICAgICAgIH0qKiByZW1vdmVkIGZyb20gdGhlIHF1ZXVlYDtcblxuICAgICAgICAgICAgU2FsdHkuc3VjY2Vzcyhtc2csIG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMF0gJiYgU2FsdHkuZ2V0TGlzdChcImNsZWFyXCIpLmluY2x1ZGVzKGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICBwbGF5bGlzdC5lbXB0eSgpO1xuXG4gICAgICAgICAgICBTYWx0eS5zdWNjZXNzKG1zZywgXCJxdWV1ZSBjbGVhcmVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFwbGF5bGlzdC5xdWV1ZVswXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFbXB0eU9iamVjdChcInF1ZXVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmV0dXJucyBhbiBlbWJlZCBtZXNzYWdlIGRpc3BsYXlpbmcgYWxsIHNvbmdzXG4gICAgICAgICAgICBsZXQgdG90YWxEdXJhdGlvbiA9IDA7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcImN1cnJlbnQgcXVldWVcIixcbiAgICAgICAgICAgICAgICBmaWVsZHM6IFtdLFxuICAgICAgICAgICAgICAgIGZvb3RlcjogYHJlcGVhdDogJHtwbGF5bGlzdC5yZXBlYXR9YCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvcHRpb25zLmZpZWxkcyA9IHBsYXlsaXN0LnF1ZXVlXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIERJU1BMQVlfTElNSVQpXG4gICAgICAgICAgICAgICAgLm1hcCgoeyBkdXJhdGlvbiwgdGl0bGUsIHVybCB9LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBgJHtpICsgMX0pICR7dGl0bGV9YDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBgJHtmb3JtYXREdXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICl9IC0gW09wZW4gaW4gYnJvd3Nlcl0oJHt1cmx9KWA7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRHVyYXRpb24gKz0gZHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcGxheWxpc3QucG9pbnRlciA9PT0gaSA/IFwiPiBcIiArIG5hbWUgOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvcHRpb25zLmRlc2NyaXB0aW9uID0gYHRvdGFsIGR1cmF0aW9uOiAke2Zvcm1hdER1cmF0aW9uKFxuICAgICAgICAgICAgICAgIHRvdGFsRHVyYXRpb25cbiAgICAgICAgICAgICl9YDtcbiAgICAgICAgICAgIGlmIChwbGF5bGlzdC5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWxpc3RUaXRsZSA9IHBsYXlsaXN0LnBsYXlpbmcudGl0bGU7XG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPVxuICAgICAgICAgICAgICAgICAgICAyMCA8IHBsYXlsaXN0VGl0bGUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBsYXlsaXN0VGl0bGUuc2xpY2UoMCwgMjApICsgXCIuLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwbGF5bGlzdFRpdGxlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGVzY3JpcHRpb24gKz0gXCIuIEN1cnJlbnRseSBwbGF5aW5nOiBcIiArIHRpdGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU2FsdHkuZW1iZWQobXNnLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG59KTtcbiJdfQ==