import fs from "fs";
import path from "path";
import Command from "../../classes/Command";
import Salty from "../../classes/Salty";
import { choice, possessive } from "../../utils";
export default new Command({
    name: "avatar",
    keys: ["pic", "picture", "pp"],
    help: [
        {
            argument: null,
            effect: "Shows a bigger version of your profile picture",
        },
        {
            argument: "***mention***",
            effect: "Shows a bigger version of ***mention***'s profile picture",
        },
    ],
    visibility: "public",
    async action(msg) {
        // Sets author as default user and adapt color to his/her role
        const mention = msg.mentions.users.first();
        const targetUser = mention ? mention : msg.author;
        const name = mention ? mention.displayName : msg.member.displayName;
        const color = mention
            ? mention.highestRole.color
            : msg.member.highestRole.color;
        let desc = "This is a huge piece of shit";
        // If there is someone in the mention list, sets that user as new default then generates random color for the swag
        if (targetUser.bot) {
            desc = "That's just a crappy bot"; // bot
        }
        else if (targetUser.id === Salty.config.owner.id) {
            desc = "He's the coolest guy i know ^-^"; // owner
        }
        else if (Salty.isAdmin(targetUser, msg.guild)) {
            desc = "It's a cute piece of shit"; // admin
        }
        // Creates embed message
        const options = {
            title: `this is ${possessive(name)} profile pic`,
        };
        if (targetUser.id === Salty.bot.user.id) {
            // if Salty
            const files = fs.readdirSync("assets/img/salty");
            const pics = files.filter((f) => f.split(".").pop() === "png");
            options.title = `how cute, you asked for my profile pic ^-^`;
            options.file = path.join("assets/img/salty/", choice(pics));
        }
        else {
            options.image = targetUser.avatarURL;
            options.color = parseInt(color);
            options.description = desc;
        }
        await Salty.embed(msg, options);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2ltYWdlL2F2YXRhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sT0FBTyxNQUFNLHVCQUF1QixDQUFDO0FBQzVDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpELGVBQWUsSUFBSSxPQUFPLENBQUM7SUFDdkIsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQztJQUM5QixJQUFJLEVBQUU7UUFDRjtZQUNJLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLGdEQUFnRDtTQUMzRDtRQUNEO1lBQ0ksUUFBUSxFQUFFLGVBQWU7WUFDekIsTUFBTSxFQUFFLDJEQUEyRDtTQUN0RTtLQUNKO0lBQ0QsVUFBVSxFQUFFLFFBQVE7SUFDcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHO1FBQ1osOERBQThEO1FBQzlELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBRWxELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDcEUsTUFBTSxLQUFLLEdBQUcsT0FBTztZQUNqQixDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLO1lBQzNCLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDbkMsSUFBSSxJQUFJLEdBQUcsOEJBQThCLENBQUM7UUFFMUMsa0hBQWtIO1FBQ2xILElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNoQixJQUFJLEdBQUcsMEJBQTBCLENBQUMsQ0FBQyxNQUFNO1NBQzVDO2FBQU0sSUFBSSxVQUFVLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNoRCxJQUFJLEdBQUcsaUNBQWlDLENBQUMsQ0FBQyxRQUFRO1NBQ3JEO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxHQUFHLDJCQUEyQixDQUFDLENBQUMsUUFBUTtTQUMvQztRQUVELHdCQUF3QjtRQUN4QixNQUFNLE9BQU8sR0FBRztZQUNaLEtBQUssRUFBRSxXQUFXLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYztTQUNuRCxDQUFDO1FBRUYsSUFBSSxVQUFVLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxXQUFXO1lBQ1gsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDL0QsT0FBTyxDQUFDLEtBQUssR0FBRyw0Q0FBNEMsQ0FBQztZQUM3RCxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDL0Q7YUFBTTtZQUNILE9BQU8sQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQztZQUNyQyxPQUFPLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUM5QjtRQUNELE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQgU2FsdHkgZnJvbSBcIi4uLy4uL2NsYXNzZXMvU2FsdHlcIjtcbmltcG9ydCB7IGNob2ljZSwgcG9zc2Vzc2l2ZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29tbWFuZCh7XG4gICAgbmFtZTogXCJhdmF0YXJcIixcbiAgICBrZXlzOiBbXCJwaWNcIiwgXCJwaWN0dXJlXCIsIFwicHBcIl0sXG4gICAgaGVscDogW1xuICAgICAgICB7XG4gICAgICAgICAgICBhcmd1bWVudDogbnVsbCxcbiAgICAgICAgICAgIGVmZmVjdDogXCJTaG93cyBhIGJpZ2dlciB2ZXJzaW9uIG9mIHlvdXIgcHJvZmlsZSBwaWN0dXJlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcIioqKm1lbnRpb24qKipcIixcbiAgICAgICAgICAgIGVmZmVjdDogXCJTaG93cyBhIGJpZ2dlciB2ZXJzaW9uIG9mICoqKm1lbnRpb24qKioncyBwcm9maWxlIHBpY3R1cmVcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHZpc2liaWxpdHk6IFwicHVibGljXCIsXG4gICAgYXN5bmMgYWN0aW9uKG1zZykge1xuICAgICAgICAvLyBTZXRzIGF1dGhvciBhcyBkZWZhdWx0IHVzZXIgYW5kIGFkYXB0IGNvbG9yIHRvIGhpcy9oZXIgcm9sZVxuICAgICAgICBjb25zdCBtZW50aW9uID0gbXNnLm1lbnRpb25zLnVzZXJzLmZpcnN0KCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFVzZXIgPSBtZW50aW9uID8gbWVudGlvbiA6IG1zZy5hdXRob3I7XG5cbiAgICAgICAgY29uc3QgbmFtZSA9IG1lbnRpb24gPyBtZW50aW9uLmRpc3BsYXlOYW1lIDogbXNnLm1lbWJlci5kaXNwbGF5TmFtZTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBtZW50aW9uXG4gICAgICAgICAgICA/IG1lbnRpb24uaGlnaGVzdFJvbGUuY29sb3JcbiAgICAgICAgICAgIDogbXNnLm1lbWJlci5oaWdoZXN0Um9sZS5jb2xvcjtcbiAgICAgICAgbGV0IGRlc2MgPSBcIlRoaXMgaXMgYSBodWdlIHBpZWNlIG9mIHNoaXRcIjtcblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBzb21lb25lIGluIHRoZSBtZW50aW9uIGxpc3QsIHNldHMgdGhhdCB1c2VyIGFzIG5ldyBkZWZhdWx0IHRoZW4gZ2VuZXJhdGVzIHJhbmRvbSBjb2xvciBmb3IgdGhlIHN3YWdcbiAgICAgICAgaWYgKHRhcmdldFVzZXIuYm90KSB7XG4gICAgICAgICAgICBkZXNjID0gXCJUaGF0J3MganVzdCBhIGNyYXBweSBib3RcIjsgLy8gYm90XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0VXNlci5pZCA9PT0gU2FsdHkuY29uZmlnLm93bmVyLmlkKSB7XG4gICAgICAgICAgICBkZXNjID0gXCJIZSdzIHRoZSBjb29sZXN0IGd1eSBpIGtub3cgXi1eXCI7IC8vIG93bmVyXG4gICAgICAgIH0gZWxzZSBpZiAoU2FsdHkuaXNBZG1pbih0YXJnZXRVc2VyLCBtc2cuZ3VpbGQpKSB7XG4gICAgICAgICAgICBkZXNjID0gXCJJdCdzIGEgY3V0ZSBwaWVjZSBvZiBzaGl0XCI7IC8vIGFkbWluXG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGVzIGVtYmVkIG1lc3NhZ2VcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBgdGhpcyBpcyAke3Bvc3Nlc3NpdmUobmFtZSl9IHByb2ZpbGUgcGljYCxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGFyZ2V0VXNlci5pZCA9PT0gU2FsdHkuYm90LnVzZXIuaWQpIHtcbiAgICAgICAgICAgIC8vIGlmIFNhbHR5XG4gICAgICAgICAgICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKFwiYXNzZXRzL2ltZy9zYWx0eVwiKTtcbiAgICAgICAgICAgIGNvbnN0IHBpY3MgPSBmaWxlcy5maWx0ZXIoKGYpID0+IGYuc3BsaXQoXCIuXCIpLnBvcCgpID09PSBcInBuZ1wiKTtcbiAgICAgICAgICAgIG9wdGlvbnMudGl0bGUgPSBgaG93IGN1dGUsIHlvdSBhc2tlZCBmb3IgbXkgcHJvZmlsZSBwaWMgXi1eYDtcbiAgICAgICAgICAgIG9wdGlvbnMuZmlsZSA9IHBhdGguam9pbihcImFzc2V0cy9pbWcvc2FsdHkvXCIsIGNob2ljZShwaWNzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLmltYWdlID0gdGFyZ2V0VXNlci5hdmF0YXJVUkw7XG4gICAgICAgICAgICBvcHRpb25zLmNvbG9yID0gcGFyc2VJbnQoY29sb3IpO1xuICAgICAgICAgICAgb3B0aW9ucy5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgU2FsdHkuZW1iZWQobXNnLCBvcHRpb25zKTtcbiAgICB9LFxufSk7XG4iXX0=