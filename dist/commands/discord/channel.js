import Command from "../../classes/Command";
import Guild from "../../classes/Guild";
import Salty from "../../classes/Salty";
export default new Command({
    name: "channel",
    keys: ["chan"],
    help: [
        {
            argument: null,
            effect: "Shows the current default channel",
        },
        {
            argument: "set",
            effect: "Sets this channel as the default one for this server",
        },
        {
            argument: "unset",
            effect: "Unsets this server's default channel",
        },
    ],
    visibility: "admin",
    async action(msg, args) {
        const guild = Guild.get(msg.guild.id);
        if (args[0] && Salty.getList("add").includes(args[0])) {
            await Guild.update(guild.id, { default_channel: msg.channel.id });
            await Salty.success(msg, `channel **${msg.channel.name}** has been successfuly set as default bot channel for **${msg.guild.name}**`);
        }
        else if (args[0] && Salty.getList("delete").includes(args[0])) {
            if (!guild.default_channel) {
                return Salty.message(msg, "no default bot channel set");
            }
            await Guild.update(guild.id, { default_channel: null });
            await Salty.success(msg, "default bot channel has been successfuly removed");
        }
        else {
            if (!guild.default_channel) {
                return Salty.message(msg, "no default bot channel set");
            }
            const chanName = Salty.bot.channels.get(guild.default_channel).name;
            if (parseInt(msg.channel.id) === parseInt(guild.default_channel)) {
                await Salty.embed(msg, {
                    title: "this is the current default channel",
                    description: "I'll speak right here when I need to",
                });
            }
            else {
                await Salty.embed(msg, {
                    title: `default bot channel is **${chanName}**`,
                    description: "this is where I'll speak when I need to",
                });
            }
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9kaXNjb3JkL2NoYW5uZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sdUJBQXVCLENBQUM7QUFDNUMsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUM7QUFDeEMsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUM7QUFFeEMsZUFBZSxJQUFJLE9BQU8sQ0FBQztJQUN2QixJQUFJLEVBQUUsU0FBUztJQUNmLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNkLElBQUksRUFBRTtRQUNGO1lBQ0ksUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsbUNBQW1DO1NBQzlDO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsS0FBSztZQUNmLE1BQU0sRUFBRSxzREFBc0Q7U0FDakU7UUFDRDtZQUNJLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLE1BQU0sRUFBRSxzQ0FBc0M7U0FDakQ7S0FDSjtJQUNELFVBQVUsRUFBRSxPQUFPO0lBQ25CLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDbEIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXRDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25ELE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQ2YsR0FBRyxFQUNILGFBQWEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDREQUE0RCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUM5RyxDQUFDO1NBQ0w7YUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM3RCxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRTtnQkFDeEIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN4RCxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQ2YsR0FBRyxFQUNILGtEQUFrRCxDQUNyRCxDQUFDO1NBQ0w7YUFBTTtZQUNILElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFO2dCQUN4QixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7YUFDM0Q7WUFDRCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwRSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQzlELE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7b0JBQ25CLEtBQUssRUFBRSxxQ0FBcUM7b0JBQzVDLFdBQVcsRUFBRSxzQ0FBc0M7aUJBQ3RELENBQUMsQ0FBQzthQUNOO2lCQUFNO2dCQUNILE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7b0JBQ25CLEtBQUssRUFBRSw0QkFBNEIsUUFBUSxJQUFJO29CQUMvQyxXQUFXLEVBQUUseUNBQXlDO2lCQUN6RCxDQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tYW5kIGZyb20gXCIuLi8uLi9jbGFzc2VzL0NvbW1hbmRcIjtcbmltcG9ydCBHdWlsZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9HdWlsZFwiO1xuaW1wb3J0IFNhbHR5IGZyb20gXCIuLi8uLi9jbGFzc2VzL1NhbHR5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb21tYW5kKHtcbiAgICBuYW1lOiBcImNoYW5uZWxcIixcbiAgICBrZXlzOiBbXCJjaGFuXCJdLFxuICAgIGhlbHA6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBlZmZlY3Q6IFwiU2hvd3MgdGhlIGN1cnJlbnQgZGVmYXVsdCBjaGFubmVsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcInNldFwiLFxuICAgICAgICAgICAgZWZmZWN0OiBcIlNldHMgdGhpcyBjaGFubmVsIGFzIHRoZSBkZWZhdWx0IG9uZSBmb3IgdGhpcyBzZXJ2ZXJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwidW5zZXRcIixcbiAgICAgICAgICAgIGVmZmVjdDogXCJVbnNldHMgdGhpcyBzZXJ2ZXIncyBkZWZhdWx0IGNoYW5uZWxcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHZpc2liaWxpdHk6IFwiYWRtaW5cIixcbiAgICBhc3luYyBhY3Rpb24obXNnLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IGd1aWxkID0gR3VpbGQuZ2V0KG1zZy5ndWlsZC5pZCk7XG5cbiAgICAgICAgaWYgKGFyZ3NbMF0gJiYgU2FsdHkuZ2V0TGlzdChcImFkZFwiKS5pbmNsdWRlcyhhcmdzWzBdKSkge1xuICAgICAgICAgICAgYXdhaXQgR3VpbGQudXBkYXRlKGd1aWxkLmlkLCB7IGRlZmF1bHRfY2hhbm5lbDogbXNnLmNoYW5uZWwuaWQgfSk7XG4gICAgICAgICAgICBhd2FpdCBTYWx0eS5zdWNjZXNzKFxuICAgICAgICAgICAgICAgIG1zZyxcbiAgICAgICAgICAgICAgICBgY2hhbm5lbCAqKiR7bXNnLmNoYW5uZWwubmFtZX0qKiBoYXMgYmVlbiBzdWNjZXNzZnVseSBzZXQgYXMgZGVmYXVsdCBib3QgY2hhbm5lbCBmb3IgKioke21zZy5ndWlsZC5uYW1lfSoqYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmdzWzBdICYmIFNhbHR5LmdldExpc3QoXCJkZWxldGVcIikuaW5jbHVkZXMoYXJnc1swXSkpIHtcbiAgICAgICAgICAgIGlmICghZ3VpbGQuZGVmYXVsdF9jaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNhbHR5Lm1lc3NhZ2UobXNnLCBcIm5vIGRlZmF1bHQgYm90IGNoYW5uZWwgc2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgR3VpbGQudXBkYXRlKGd1aWxkLmlkLCB7IGRlZmF1bHRfY2hhbm5lbDogbnVsbCB9KTtcbiAgICAgICAgICAgIGF3YWl0IFNhbHR5LnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgbXNnLFxuICAgICAgICAgICAgICAgIFwiZGVmYXVsdCBib3QgY2hhbm5lbCBoYXMgYmVlbiBzdWNjZXNzZnVseSByZW1vdmVkXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWd1aWxkLmRlZmF1bHRfY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTYWx0eS5tZXNzYWdlKG1zZywgXCJubyBkZWZhdWx0IGJvdCBjaGFubmVsIHNldFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNoYW5OYW1lID0gU2FsdHkuYm90LmNoYW5uZWxzLmdldChndWlsZC5kZWZhdWx0X2NoYW5uZWwpLm5hbWU7XG4gICAgICAgICAgICBpZiAocGFyc2VJbnQobXNnLmNoYW5uZWwuaWQpID09PSBwYXJzZUludChndWlsZC5kZWZhdWx0X2NoYW5uZWwpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgU2FsdHkuZW1iZWQobXNnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcInRoaXMgaXMgdGhlIGN1cnJlbnQgZGVmYXVsdCBjaGFubmVsXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkknbGwgc3BlYWsgcmlnaHQgaGVyZSB3aGVuIEkgbmVlZCB0b1wiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBTYWx0eS5lbWJlZChtc2csIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGBkZWZhdWx0IGJvdCBjaGFubmVsIGlzICoqJHtjaGFuTmFtZX0qKmAsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInRoaXMgaXMgd2hlcmUgSSdsbCBzcGVhayB3aGVuIEkgbmVlZCB0b1wiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbn0pO1xuIl19