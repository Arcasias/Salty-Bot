import Command from "../../classes/Command";
import { IncorrectValue, MissingArg } from "../../classes/Exception";
import Salty from "../../classes/Salty";
import { isSorted, shuffle } from "../../utils";
export default new Command({
    name: "monkey",
    keys: [
        "bogosort",
        "monkeysort",
        "permutationsort",
        "shotgunsort",
        "slowsort",
        "stupidsort",
    ],
    help: [
        {
            argument: null,
            effect: "Monkey sorts a 10 elements array",
        },
        {
            argument: "***array length***",
            effect: "Monkey sorts an array of the provided length (lowered to maximum 10, let's not make me explode shall we ?)",
        },
    ],
    visibility: "public",
    async action(msg, args) {
        if (!args[0]) {
            throw new MissingArg("length");
        }
        if (args[0] < 1) {
            throw new IncorrectValue("length", "number between 1 and 10");
        }
        const runningMsg = await Salty.message(msg, "monkey sorting ...");
        let tests = 0;
        let length = Math.min(args[0], 10);
        let list = [];
        const sortingTime = await new Promise((resolve) => {
            for (let i = 0; i < length; i++) {
                list.push(i);
            }
            list = shuffle(list);
            tests = 0;
            const startTimeStamp = Date.now();
            while (!isSorted(list)) {
                list = shuffle(list);
                tests++;
            }
            resolve(Math.floor((Date.now() - startTimeStamp) / 100) / 10);
        });
        runningMsg.delete();
        await Salty.success(msg, `monkey sort on a **${length}** elements list took **${sortingTime}** seconds in **${tests}** tests`, { react: "🐒" });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ua2V5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL21pc2MvbW9ua2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLHVCQUF1QixDQUFDO0FBQzVDLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFaEQsZUFBZSxJQUFJLE9BQU8sQ0FBQztJQUN2QixJQUFJLEVBQUUsUUFBUTtJQUNkLElBQUksRUFBRTtRQUNGLFVBQVU7UUFDVixZQUFZO1FBQ1osaUJBQWlCO1FBQ2pCLGFBQWE7UUFDYixVQUFVO1FBQ1YsWUFBWTtLQUNmO0lBQ0QsSUFBSSxFQUFFO1FBQ0Y7WUFDSSxRQUFRLEVBQUUsSUFBSTtZQUNkLE1BQU0sRUFBRSxrQ0FBa0M7U0FDN0M7UUFDRDtZQUNJLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsTUFBTSxFQUNGLDRHQUE0RztTQUNuSDtLQUNKO0lBQ0QsVUFBVSxFQUFFLFFBQVE7SUFDcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSTtRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ1YsTUFBTSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNsQztRQUNELElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNiLE1BQU0sSUFBSSxjQUFjLENBQUMsUUFBUSxFQUFFLHlCQUF5QixDQUFDLENBQUM7U0FDakU7UUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDbEUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbkMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEI7WUFDRCxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLEtBQUssR0FBRyxDQUFDLENBQUM7WUFFVixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFbEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckIsS0FBSyxFQUFFLENBQUM7YUFDWDtZQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQyxDQUFDO1FBRUgsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3BCLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FDZixHQUFHLEVBQ0gsc0JBQXNCLE1BQU0sMkJBQTJCLFdBQVcsbUJBQW1CLEtBQUssVUFBVSxFQUNwRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FDbEIsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQgeyBJbmNvcnJlY3RWYWx1ZSwgTWlzc2luZ0FyZyB9IGZyb20gXCIuLi8uLi9jbGFzc2VzL0V4Y2VwdGlvblwiO1xuaW1wb3J0IFNhbHR5IGZyb20gXCIuLi8uLi9jbGFzc2VzL1NhbHR5XCI7XG5pbXBvcnQgeyBpc1NvcnRlZCwgc2h1ZmZsZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29tbWFuZCh7XG4gICAgbmFtZTogXCJtb25rZXlcIixcbiAgICBrZXlzOiBbXG4gICAgICAgIFwiYm9nb3NvcnRcIixcbiAgICAgICAgXCJtb25rZXlzb3J0XCIsXG4gICAgICAgIFwicGVybXV0YXRpb25zb3J0XCIsXG4gICAgICAgIFwic2hvdGd1bnNvcnRcIixcbiAgICAgICAgXCJzbG93c29ydFwiLFxuICAgICAgICBcInN0dXBpZHNvcnRcIixcbiAgICBdLFxuICAgIGhlbHA6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBlZmZlY3Q6IFwiTW9ua2V5IHNvcnRzIGEgMTAgZWxlbWVudHMgYXJyYXlcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwiKioqYXJyYXkgbGVuZ3RoKioqXCIsXG4gICAgICAgICAgICBlZmZlY3Q6XG4gICAgICAgICAgICAgICAgXCJNb25rZXkgc29ydHMgYW4gYXJyYXkgb2YgdGhlIHByb3ZpZGVkIGxlbmd0aCAobG93ZXJlZCB0byBtYXhpbXVtIDEwLCBsZXQncyBub3QgbWFrZSBtZSBleHBsb2RlIHNoYWxsIHdlID8pXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICB2aXNpYmlsaXR5OiBcInB1YmxpY1wiLFxuICAgIGFzeW5jIGFjdGlvbihtc2csIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFhcmdzWzBdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0FyZyhcImxlbmd0aFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJnc1swXSA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbmNvcnJlY3RWYWx1ZShcImxlbmd0aFwiLCBcIm51bWJlciBiZXR3ZWVuIDEgYW5kIDEwXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcnVubmluZ01zZyA9IGF3YWl0IFNhbHR5Lm1lc3NhZ2UobXNnLCBcIm1vbmtleSBzb3J0aW5nIC4uLlwiKTtcbiAgICAgICAgbGV0IHRlc3RzID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IE1hdGgubWluKGFyZ3NbMF0sIDEwKTtcbiAgICAgICAgbGV0IGxpc3QgPSBbXTtcblxuICAgICAgICBjb25zdCBzb3J0aW5nVGltZSA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdCA9IHNodWZmbGUobGlzdCk7XG4gICAgICAgICAgICB0ZXN0cyA9IDA7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGltZVN0YW1wID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgd2hpbGUgKCFpc1NvcnRlZChsaXN0KSkge1xuICAgICAgICAgICAgICAgIGxpc3QgPSBzaHVmZmxlKGxpc3QpO1xuICAgICAgICAgICAgICAgIHRlc3RzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBzdGFydFRpbWVTdGFtcCkgLyAxMDApIC8gMTApO1xuICAgICAgICB9KTtcblxuICAgICAgICBydW5uaW5nTXNnLmRlbGV0ZSgpO1xuICAgICAgICBhd2FpdCBTYWx0eS5zdWNjZXNzKFxuICAgICAgICAgICAgbXNnLFxuICAgICAgICAgICAgYG1vbmtleSBzb3J0IG9uIGEgKioke2xlbmd0aH0qKiBlbGVtZW50cyBsaXN0IHRvb2sgKioke3NvcnRpbmdUaW1lfSoqIHNlY29uZHMgaW4gKioke3Rlc3RzfSoqIHRlc3RzYCxcbiAgICAgICAgICAgIHsgcmVhY3Q6IFwi8J+QklwiIH1cbiAgICAgICAgKTtcbiAgICB9LFxufSk7XG4iXX0=