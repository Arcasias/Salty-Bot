import Command from "../../classes/Command";
import Salty from "../../classes/Salty";
const specialActions = [
    {
        keywords: ["nude", "nudes"],
        response: "you wish",
    },
    {
        keywords: ["nood", "noods", "noodle", "noodles"],
        response: "you're so poor",
    },
    {
        keywords: ["noot", "noots"],
        response: "NOOT NOOT",
    },
];
export default new Command({
    name: "send",
    keys: ["say", Salty.config.prefix],
    help: [
        {
            argument: null,
            effect: null,
        },
        {
            argument: "***anything***",
            effect: "Sends something. Who knows what ?",
        },
    ],
    visibility: "public",
    async action(msg, args) {
        if (!args[0]) {
            return Salty.commands.list.get("talk").run(msg, args);
        }
        let message;
        for (let sa of specialActions) {
            if (sa.keywords.includes(args[0])) {
                message = sa.response;
            }
        }
        if (!message) {
            msg.delete();
            message = args.join(" ");
        }
        await Salty.message(msg, message);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9taXNjL3NlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sdUJBQXVCLENBQUM7QUFDNUMsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUM7QUFFeEMsTUFBTSxjQUFjLEdBQUc7SUFDbkI7UUFDSSxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO1FBQzNCLFFBQVEsRUFBRSxVQUFVO0tBQ3ZCO0lBQ0Q7UUFDSSxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDaEQsUUFBUSxFQUFFLGdCQUFnQjtLQUM3QjtJQUNEO1FBQ0ksUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztRQUMzQixRQUFRLEVBQUUsV0FBVztLQUN4QjtDQUNKLENBQUM7QUFFRixlQUFlLElBQUksT0FBTyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xDLElBQUksRUFBRTtRQUNGO1lBQ0ksUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsSUFBSTtTQUNmO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLE1BQU0sRUFBRSxtQ0FBbUM7U0FDOUM7S0FDSjtJQUNELFVBQVUsRUFBRSxRQUFRO0lBQ3BCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNWLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekQ7UUFDRCxJQUFJLE9BQU8sQ0FBQztRQUNaLEtBQUssSUFBSSxFQUFFLElBQUksY0FBYyxFQUFFO1lBQzNCLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDO2FBQ3pCO1NBQ0o7UUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUI7UUFDRCxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQgU2FsdHkgZnJvbSBcIi4uLy4uL2NsYXNzZXMvU2FsdHlcIjtcblxuY29uc3Qgc3BlY2lhbEFjdGlvbnMgPSBbXG4gICAge1xuICAgICAgICBrZXl3b3JkczogW1wibnVkZVwiLCBcIm51ZGVzXCJdLFxuICAgICAgICByZXNwb25zZTogXCJ5b3Ugd2lzaFwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXl3b3JkczogW1wibm9vZFwiLCBcIm5vb2RzXCIsIFwibm9vZGxlXCIsIFwibm9vZGxlc1wiXSxcbiAgICAgICAgcmVzcG9uc2U6IFwieW91J3JlIHNvIHBvb3JcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5d29yZHM6IFtcIm5vb3RcIiwgXCJub290c1wiXSxcbiAgICAgICAgcmVzcG9uc2U6IFwiTk9PVCBOT09UXCIsXG4gICAgfSxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb21tYW5kKHtcbiAgICBuYW1lOiBcInNlbmRcIixcbiAgICBrZXlzOiBbXCJzYXlcIiwgU2FsdHkuY29uZmlnLnByZWZpeF0sXG4gICAgaGVscDogW1xuICAgICAgICB7XG4gICAgICAgICAgICBhcmd1bWVudDogbnVsbCxcbiAgICAgICAgICAgIGVmZmVjdDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwiKioqYW55dGhpbmcqKipcIixcbiAgICAgICAgICAgIGVmZmVjdDogXCJTZW5kcyBzb21ldGhpbmcuIFdobyBrbm93cyB3aGF0ID9cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHZpc2liaWxpdHk6IFwicHVibGljXCIsXG4gICAgYXN5bmMgYWN0aW9uKG1zZywgYXJncykge1xuICAgICAgICBpZiAoIWFyZ3NbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiBTYWx0eS5jb21tYW5kcy5saXN0LmdldChcInRhbGtcIikucnVuKG1zZywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgIGZvciAobGV0IHNhIG9mIHNwZWNpYWxBY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoc2Eua2V5d29yZHMuaW5jbHVkZXMoYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gc2EucmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICBtc2cuZGVsZXRlKCk7XG4gICAgICAgICAgICBtZXNzYWdlID0gYXJncy5qb2luKFwiIFwiKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBTYWx0eS5tZXNzYWdlKG1zZywgbWVzc2FnZSk7XG4gICAgfSxcbn0pO1xuIl19