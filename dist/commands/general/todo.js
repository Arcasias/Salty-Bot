import Command from "../../classes/Command";
import { EmptyObject, OutOfRange, SaltyException, } from "../../classes/Exception";
import Salty from "../../classes/Salty";
import User from "../../classes/User";
export default new Command({
    name: "todo",
    keys: ["todos"],
    help: [
        {
            argument: null,
            effect: "Shows your todo list",
        },
        {
            argument: "***something to do***",
            effect: "Adds something to your todo list",
        },
    ],
    visibility: "public",
    async action(msg, args) {
        let user = User.get(msg.author.id);
        if (args[0] && Salty.getList("delete").includes(args[0])) {
            let todoList = user.todo;
            if (0 === todoList.length) {
                throw new SaltyException("your todo list is empty");
            }
            if (!args[1] || !todoList[parseInt(args[1]) - 1]) {
                throw new OutOfRange(args[1]);
            }
            user.todo.splice(parseInt(args[1]) - 1, 1);
            Salty.success(msg, `item number **${args[1]}** removed from your todo list`);
        }
        else if (args[0] && Salty.getList("delete").includes(args[0])) {
            user.todo = [];
            Salty.message(msg, "your todo list has been cleared");
        }
        else {
            if ((args[0] && Salty.getList("list").includes(args[0])) ||
                !args[0]) {
                if (0 === user.todo.length) {
                    throw new EmptyObject("your todo list");
                }
                Salty.embed(msg, {
                    title: "<author>'s todo list",
                    description: `> ${user.todo.join("\n> ")}`,
                });
            }
            else {
                user.todo.push(args.join(" "));
                Salty.message(msg, `I added "**${args.join(" ")}**" to your todo list`);
            }
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9kby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmFsL3RvZG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sdUJBQXVCLENBQUM7QUFDNUMsT0FBTyxFQUNILFdBQVcsRUFDWCxVQUFVLEVBQ1YsY0FBYyxHQUNqQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hDLE9BQU8sSUFBSSxNQUFNLG9CQUFvQixDQUFDO0FBRXRDLGVBQWUsSUFBSSxPQUFPLENBQUM7SUFDdkIsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFDZixJQUFJLEVBQUU7UUFDRjtZQUNJLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLHNCQUFzQjtTQUNqQztRQUNEO1lBQ0ksUUFBUSxFQUFFLHVCQUF1QjtZQUNqQyxNQUFNLEVBQUUsa0NBQWtDO1NBQzdDO0tBQ0o7SUFDRCxVQUFVLEVBQUUsUUFBUTtJQUNwQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ2xCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0RCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBRXpCLElBQUksQ0FBQyxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3ZCLE1BQU0sSUFBSSxjQUFjLENBQUMseUJBQXlCLENBQUMsQ0FBQzthQUN2RDtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUM5QyxNQUFNLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUUzQyxLQUFLLENBQUMsT0FBTyxDQUNULEdBQUcsRUFDSCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FDM0QsQ0FBQztTQUNMO2FBQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDN0QsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDZixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ3pEO2FBQU07WUFDSCxJQUNJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDVjtnQkFDRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDeEIsTUFBTSxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2lCQUMzQztnQkFDRCxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtvQkFDYixLQUFLLEVBQUUsc0JBQXNCO29CQUM3QixXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtpQkFDN0MsQ0FBQyxDQUFDO2FBQ047aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixLQUFLLENBQUMsT0FBTyxDQUNULEdBQUcsRUFDSCxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUN0RCxDQUFDO2FBQ0w7U0FDSjtJQUNMLENBQUM7Q0FDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQge1xuICAgIEVtcHR5T2JqZWN0LFxuICAgIE91dE9mUmFuZ2UsXG4gICAgU2FsdHlFeGNlcHRpb24sXG59IGZyb20gXCIuLi8uLi9jbGFzc2VzL0V4Y2VwdGlvblwiO1xuaW1wb3J0IFNhbHR5IGZyb20gXCIuLi8uLi9jbGFzc2VzL1NhbHR5XCI7XG5pbXBvcnQgVXNlciBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Vc2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb21tYW5kKHtcbiAgICBuYW1lOiBcInRvZG9cIixcbiAgICBrZXlzOiBbXCJ0b2Rvc1wiXSxcbiAgICBoZWxwOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBudWxsLFxuICAgICAgICAgICAgZWZmZWN0OiBcIlNob3dzIHlvdXIgdG9kbyBsaXN0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcIioqKnNvbWV0aGluZyB0byBkbyoqKlwiLFxuICAgICAgICAgICAgZWZmZWN0OiBcIkFkZHMgc29tZXRoaW5nIHRvIHlvdXIgdG9kbyBsaXN0XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICB2aXNpYmlsaXR5OiBcInB1YmxpY1wiLFxuICAgIGFzeW5jIGFjdGlvbihtc2csIGFyZ3MpIHtcbiAgICAgICAgbGV0IHVzZXIgPSBVc2VyLmdldChtc2cuYXV0aG9yLmlkKTtcblxuICAgICAgICBpZiAoYXJnc1swXSAmJiBTYWx0eS5nZXRMaXN0KFwiZGVsZXRlXCIpLmluY2x1ZGVzKGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICBsZXQgdG9kb0xpc3QgPSB1c2VyLnRvZG87XG5cbiAgICAgICAgICAgIGlmICgwID09PSB0b2RvTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2FsdHlFeGNlcHRpb24oXCJ5b3VyIHRvZG8gbGlzdCBpcyBlbXB0eVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYXJnc1sxXSB8fCAhdG9kb0xpc3RbcGFyc2VJbnQoYXJnc1sxXSkgLSAxXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBPdXRPZlJhbmdlKGFyZ3NbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXNlci50b2RvLnNwbGljZShwYXJzZUludChhcmdzWzFdKSAtIDEsIDEpO1xuXG4gICAgICAgICAgICBTYWx0eS5zdWNjZXNzKFxuICAgICAgICAgICAgICAgIG1zZyxcbiAgICAgICAgICAgICAgICBgaXRlbSBudW1iZXIgKioke2FyZ3NbMV19KiogcmVtb3ZlZCBmcm9tIHlvdXIgdG9kbyBsaXN0YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmdzWzBdICYmIFNhbHR5LmdldExpc3QoXCJkZWxldGVcIikuaW5jbHVkZXMoYXJnc1swXSkpIHtcbiAgICAgICAgICAgIHVzZXIudG9kbyA9IFtdO1xuICAgICAgICAgICAgU2FsdHkubWVzc2FnZShtc2csIFwieW91ciB0b2RvIGxpc3QgaGFzIGJlZW4gY2xlYXJlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoYXJnc1swXSAmJiBTYWx0eS5nZXRMaXN0KFwibGlzdFwiKS5pbmNsdWRlcyhhcmdzWzBdKSkgfHxcbiAgICAgICAgICAgICAgICAhYXJnc1swXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHVzZXIudG9kby5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVtcHR5T2JqZWN0KFwieW91ciB0b2RvIGxpc3RcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFNhbHR5LmVtYmVkKG1zZywge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCI8YXV0aG9yPidzIHRvZG8gbGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYD4gJHt1c2VyLnRvZG8uam9pbihcIlxcbj4gXCIpfWAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVzZXIudG9kby5wdXNoKGFyZ3Muam9pbihcIiBcIikpO1xuICAgICAgICAgICAgICAgIFNhbHR5Lm1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgIG1zZyxcbiAgICAgICAgICAgICAgICAgICAgYEkgYWRkZWQgXCIqKiR7YXJncy5qb2luKFwiIFwiKX0qKlwiIHRvIHlvdXIgdG9kbyBsaXN0YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG4iXX0=