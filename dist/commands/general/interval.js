import Command from "../../classes/Command";
import { EmptyObject, IncorrectValue, MissingArg, } from "../../classes/Exception";
import Salty from "../../classes/Salty";
const INTERVALS = {};
export default new Command({
    name: "interval",
    keys: [],
    help: [
        {
            argument: null,
            effect: null,
        },
        {
            argument: "*delay* ***anything***",
            effect: "I'll tell what you want after a every **delay** seconds",
        },
    ],
    visibility: "dev",
    async action(msg, args) {
        if (args[0] && Salty.getList("clear").includes(args[0])) {
            if (!INTERVALS[msg.guild.id]) {
                throw new EmptyObject("interval");
            }
            clearInterval(INTERVALS[msg.guild.id]);
            Salty.success(msg, "Interval cleared");
        }
        else {
            if (!args[0]) {
                throw new MissingArg("delay");
            }
            if (isNaN(args[0])) {
                throw new IncorrectValue("delay", "number");
            }
            if (!args[1]) {
                throw new MissingArg("message");
            }
            const delay = parseInt(args.shift()) * 1000;
            msg.delete().catch();
            if (INTERVALS[msg.guild.id]) {
                clearInterval(INTERVALS[msg.guild.id]);
            }
            INTERVALS[msg.guild.id] = setInterval(() => {
                Salty.message(msg, args.join(" "));
            }, delay);
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJ2YWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvZ2VuZXJhbC9pbnRlcnZhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSx1QkFBdUIsQ0FBQztBQUM1QyxPQUFPLEVBQ0gsV0FBVyxFQUNYLGNBQWMsRUFDZCxVQUFVLEdBQ2IsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQztBQUV4QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFFckIsZUFBZSxJQUFJLE9BQU8sQ0FBQztJQUN2QixJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFJLEVBQUUsRUFBRTtJQUNSLElBQUksRUFBRTtRQUNGO1lBQ0ksUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsSUFBSTtTQUNmO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLE1BQU0sRUFBRSx5REFBeUQ7U0FDcEU7S0FDSjtJQUNELFVBQVUsRUFBRSxLQUFLO0lBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDbEIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMxQixNQUFNLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFdkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUMxQzthQUFNO1lBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDVixNQUFNLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQy9DO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDVixNQUFNLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ25DO1lBQ0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUU1QyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFckIsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDekIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUM7WUFDRCxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUN2QyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2I7SUFDTCxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbW1hbmQgZnJvbSBcIi4uLy4uL2NsYXNzZXMvQ29tbWFuZFwiO1xuaW1wb3J0IHtcbiAgICBFbXB0eU9iamVjdCxcbiAgICBJbmNvcnJlY3RWYWx1ZSxcbiAgICBNaXNzaW5nQXJnLFxufSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9FeGNlcHRpb25cIjtcbmltcG9ydCBTYWx0eSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9TYWx0eVwiO1xuXG5jb25zdCBJTlRFUlZBTFMgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbW1hbmQoe1xuICAgIG5hbWU6IFwiaW50ZXJ2YWxcIixcbiAgICBrZXlzOiBbXSxcbiAgICBoZWxwOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBudWxsLFxuICAgICAgICAgICAgZWZmZWN0OiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhcmd1bWVudDogXCIqZGVsYXkqICoqKmFueXRoaW5nKioqXCIsXG4gICAgICAgICAgICBlZmZlY3Q6IFwiSSdsbCB0ZWxsIHdoYXQgeW91IHdhbnQgYWZ0ZXIgYSBldmVyeSAqKmRlbGF5Kiogc2Vjb25kc1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdmlzaWJpbGl0eTogXCJkZXZcIixcbiAgICBhc3luYyBhY3Rpb24obXNnLCBhcmdzKSB7XG4gICAgICAgIGlmIChhcmdzWzBdICYmIFNhbHR5LmdldExpc3QoXCJjbGVhclwiKS5pbmNsdWRlcyhhcmdzWzBdKSkge1xuICAgICAgICAgICAgaWYgKCFJTlRFUlZBTFNbbXNnLmd1aWxkLmlkXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFbXB0eU9iamVjdChcImludGVydmFsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChJTlRFUlZBTFNbbXNnLmd1aWxkLmlkXSk7XG5cbiAgICAgICAgICAgIFNhbHR5LnN1Y2Nlc3MobXNnLCBcIkludGVydmFsIGNsZWFyZWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3NbMF0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0FyZyhcImRlbGF5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTmFOKGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluY29ycmVjdFZhbHVlKFwiZGVsYXlcIiwgXCJudW1iZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFyZ3NbMV0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0FyZyhcIm1lc3NhZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGFyZ3Muc2hpZnQoKSkgKiAxMDAwO1xuXG4gICAgICAgICAgICBtc2cuZGVsZXRlKCkuY2F0Y2goKTtcblxuICAgICAgICAgICAgaWYgKElOVEVSVkFMU1ttc2cuZ3VpbGQuaWRdKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChJTlRFUlZBTFNbbXNnLmd1aWxkLmlkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJTlRFUlZBTFNbbXNnLmd1aWxkLmlkXSA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBTYWx0eS5tZXNzYWdlKG1zZywgYXJncy5qb2luKFwiIFwiKSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG4iXX0=