import Command from "../../classes/Command";
import Salty from "../../classes/Salty";
import { choice, clean } from "../../utils";
const meanList = Salty.getList("meaning");
export default new Command({
    name: "talk",
    keys: [],
    help: [
        {
            argument: null,
            effect: null,
        },
        {
            argument: "***anything***",
            effect: 'I\'ll answer to what you said. As I\'m not a really advanced AI, you may want to try simple things such as "Hello" or "How are you"',
        },
    ],
    visibility: "public",
    async action(msg, args) {
        let cleanedMsg = " " + args.map((arg) => clean(arg)).join(" ") + " ";
        let meanFound = [];
        let answers = [];
        for (let mean in meanList) {
            for (let i = 0; i < meanList[mean].list.length; i++) {
                if (!meanFound.includes(mean) &&
                    cleanedMsg.match(new RegExp(" " + meanList[mean].list[i] + " ", "g"))) {
                    meanFound.push(mean);
                }
            }
        }
        if (0 < meanFound.length) {
            for (let i = 0; i < meanFound.length; i++) {
                for (let j = 0; j < meanList[meanFound[i]].answers.length; j++) {
                    answers.push(choice(Salty.getList("answers")[meanList[meanFound[i]].answers[j]]));
                }
            }
            await Salty.message(msg, answers.join(", "));
        }
        else {
            await Salty.message(msg, choice(Salty.getList("answers")["rand"]));
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFsay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmFsL3RhbGsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sdUJBQXVCLENBQUM7QUFDNUMsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFNUMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUUxQyxlQUFlLElBQUksT0FBTyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLEVBQUU7SUFDUixJQUFJLEVBQUU7UUFDRjtZQUNJLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLElBQUk7U0FDZjtRQUNEO1lBQ0ksUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixNQUFNLEVBQ0YscUlBQXFJO1NBQzVJO0tBQ0o7SUFDRCxVQUFVLEVBQUUsUUFBUTtJQUNwQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ2xCLElBQUksVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3JFLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFFakIsS0FBSyxJQUFJLElBQUksSUFBSSxRQUFRLEVBQUU7WUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNqRCxJQUNJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7b0JBQ3pCLFVBQVUsQ0FBQyxLQUFLLENBQ1osSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUN0RCxFQUNIO29CQUNFLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3hCO2FBQ0o7U0FDSjtRQUNELElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLEtBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNULENBQUMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDekMsQ0FBQyxFQUFFLEVBQ0w7b0JBQ0UsT0FBTyxDQUFDLElBQUksQ0FDUixNQUFNLENBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FDcEIsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDcEMsQ0FDSixDQUNKLENBQUM7aUJBQ0w7YUFDSjtZQUNELE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO2FBQU07WUFDSCxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0RTtJQUNMLENBQUM7Q0FDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQgU2FsdHkgZnJvbSBcIi4uLy4uL2NsYXNzZXMvU2FsdHlcIjtcbmltcG9ydCB7IGNob2ljZSwgY2xlYW4gfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuY29uc3QgbWVhbkxpc3QgPSBTYWx0eS5nZXRMaXN0KFwibWVhbmluZ1wiKTtcblxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbW1hbmQoe1xuICAgIG5hbWU6IFwidGFsa1wiLFxuICAgIGtleXM6IFtdLFxuICAgIGhlbHA6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBlZmZlY3Q6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcIioqKmFueXRoaW5nKioqXCIsXG4gICAgICAgICAgICBlZmZlY3Q6XG4gICAgICAgICAgICAgICAgJ0lcXCdsbCBhbnN3ZXIgdG8gd2hhdCB5b3Ugc2FpZC4gQXMgSVxcJ20gbm90IGEgcmVhbGx5IGFkdmFuY2VkIEFJLCB5b3UgbWF5IHdhbnQgdG8gdHJ5IHNpbXBsZSB0aGluZ3Mgc3VjaCBhcyBcIkhlbGxvXCIgb3IgXCJIb3cgYXJlIHlvdVwiJyxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHZpc2liaWxpdHk6IFwicHVibGljXCIsXG4gICAgYXN5bmMgYWN0aW9uKG1zZywgYXJncykge1xuICAgICAgICBsZXQgY2xlYW5lZE1zZyA9IFwiIFwiICsgYXJncy5tYXAoKGFyZykgPT4gY2xlYW4oYXJnKSkuam9pbihcIiBcIikgKyBcIiBcIjtcbiAgICAgICAgbGV0IG1lYW5Gb3VuZCA9IFtdO1xuICAgICAgICBsZXQgYW5zd2VycyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IG1lYW4gaW4gbWVhbkxpc3QpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVhbkxpc3RbbWVhbl0ubGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgIW1lYW5Gb3VuZC5pbmNsdWRlcyhtZWFuKSAmJlxuICAgICAgICAgICAgICAgICAgICBjbGVhbmVkTXNnLm1hdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIiBcIiArIG1lYW5MaXN0W21lYW5dLmxpc3RbaV0gKyBcIiBcIiwgXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbWVhbkZvdW5kLnB1c2gobWVhbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgwIDwgbWVhbkZvdW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWFuRm91bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGogPCBtZWFuTGlzdFttZWFuRm91bmRbaV1dLmFuc3dlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBqKytcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgYW5zd2Vycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hvaWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhbHR5LmdldExpc3QoXCJhbnN3ZXJzXCIpW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWFuTGlzdFttZWFuRm91bmRbaV1dLmFuc3dlcnNbal1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgU2FsdHkubWVzc2FnZShtc2csIGFuc3dlcnMuam9pbihcIiwgXCIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IFNhbHR5Lm1lc3NhZ2UobXNnLCBjaG9pY2UoU2FsdHkuZ2V0TGlzdChcImFuc3dlcnNcIilbXCJyYW5kXCJdKSk7XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG4iXX0=