import { MessageEmbed } from "discord";
import Command from "../../classes/Command";
import { IncorrectValue, MissingArg } from "../../classes/Exception";
import Salty from "../../classes/Salty";
export default new Command({
    name: "embed",
    keys: ["embeds", "json", "parse"],
    help: [
        {
            argument: null,
            effect: null,
        },
        {
            argument: "***JSON data***",
            effect: "Parses the provided JSON as a Discord embed",
        },
    ],
    visibility: "public",
    async action(msg, args) {
        let parsed;
        try {
            parsed = JSON.parse(args.join(" "));
        }
        catch (error) {
            throw new IncorrectValue("JSON", "json formatted string");
        }
        if (0 === Object.keys(parsed).length) {
            throw new MissingArg("JSON");
        }
        await Salty.message(msg, null, { embed: new MessageEmbed(parsed) });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvZ2VuZXJhbC9lbWJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sT0FBTyxNQUFNLHVCQUF1QixDQUFDO0FBQzVDLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUM7QUFFeEMsZUFBZSxJQUFJLE9BQU8sQ0FBQztJQUN2QixJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQ2pDLElBQUksRUFBRTtRQUNGO1lBQ0ksUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsSUFBSTtTQUNmO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLE1BQU0sRUFBRSw2Q0FBNkM7U0FDeEQ7S0FDSjtJQUNELFVBQVUsRUFBRSxRQUFRO0lBQ3BCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDbEIsSUFBSSxNQUFNLENBQUM7UUFDWCxJQUFJO1lBQ0EsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixNQUFNLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDbEMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoQztRQUNELE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZUVtYmVkIH0gZnJvbSBcImRpc2NvcmRcIjtcbmltcG9ydCBDb21tYW5kIGZyb20gXCIuLi8uLi9jbGFzc2VzL0NvbW1hbmRcIjtcbmltcG9ydCB7IEluY29ycmVjdFZhbHVlLCBNaXNzaW5nQXJnIH0gZnJvbSBcIi4uLy4uL2NsYXNzZXMvRXhjZXB0aW9uXCI7XG5pbXBvcnQgU2FsdHkgZnJvbSBcIi4uLy4uL2NsYXNzZXMvU2FsdHlcIjtcblxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbW1hbmQoe1xuICAgIG5hbWU6IFwiZW1iZWRcIixcbiAgICBrZXlzOiBbXCJlbWJlZHNcIiwgXCJqc29uXCIsIFwicGFyc2VcIl0sXG4gICAgaGVscDogW1xuICAgICAgICB7XG4gICAgICAgICAgICBhcmd1bWVudDogbnVsbCxcbiAgICAgICAgICAgIGVmZmVjdDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwiKioqSlNPTiBkYXRhKioqXCIsXG4gICAgICAgICAgICBlZmZlY3Q6IFwiUGFyc2VzIHRoZSBwcm92aWRlZCBKU09OIGFzIGEgRGlzY29yZCBlbWJlZFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdmlzaWJpbGl0eTogXCJwdWJsaWNcIixcbiAgICBhc3luYyBhY3Rpb24obXNnLCBhcmdzKSB7XG4gICAgICAgIGxldCBwYXJzZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJzZWQgPSBKU09OLnBhcnNlKGFyZ3Muam9pbihcIiBcIikpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEluY29ycmVjdFZhbHVlKFwiSlNPTlwiLCBcImpzb24gZm9ybWF0dGVkIHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoMCA9PT0gT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nQXJnKFwiSlNPTlwiKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBTYWx0eS5tZXNzYWdlKG1zZywgbnVsbCwgeyBlbWJlZDogbmV3IE1lc3NhZ2VFbWJlZChwYXJzZWQpIH0pO1xuICAgIH0sXG59KTtcbiJdfQ==