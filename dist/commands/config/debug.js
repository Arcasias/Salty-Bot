import Command from "../../classes/Command";
import { MissingArg } from "../../classes/Exception";
import Guild from "../../classes/Guild";
import Salty from "../../classes/Salty";
import User from "../../classes/User";
import { log } from "../../utils";
const MAXDEPTH = 3;
// Avoid linter to consider these useless
((a, b) => null)(Guild, User);
function getFormat(variable, depth) {
    if (depth > MAXDEPTH) {
        return;
    }
    const type = Array.isArray(variable) ? "array" : typeof variable;
    let res;
    switch (type) {
        case "string": {
            res = `"${variable}"`;
            break;
        }
        case "array": {
            const items = [];
            for (let item of variable) {
                items.push(getFormat(item, depth + 1));
            }
            res = `[${items.join(", ")}]`;
            break;
        }
        case "object": {
            const items = [];
            for (let key in variable) {
                items.push(`${getFormat(key, depth + 1)}: ${getFormat(variable[key], depth + 1)}`);
            }
            res = `{\n${items.join(",\n\t")}\n}`;
            break;
        }
        default:
            res = String(variable);
    }
    return res;
}
export default new Command({
    name: "debug",
    keys: [],
    help: [
        {
            argument: "***JS code***",
            effect: "Executes a ***JS code*** within Salty context",
        },
    ],
    visibility: "dev",
    async action(msg, args) {
        if (!args[0]) {
            throw new MissingArg("instructions");
        }
        const res = eval(args.join(" "));
        const message = `${args.join(" ")} = /*${typeof res}*/ ${getFormat(res, 0)}`;
        Salty.message(msg, `\`\`\`js\n${message.slice(0, 1950)}\n\`\`\``);
        log(message);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvY29uZmlnL2RlYnVnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLHVCQUF1QixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQztBQUN4QyxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQztBQUN4QyxPQUFPLElBQUksTUFBTSxvQkFBb0IsQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQztBQUVuQix5Q0FBeUM7QUFDekMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUU5QixTQUFTLFNBQVMsQ0FBQyxRQUFhLEVBQUUsS0FBYTtJQUMzQyxJQUFJLEtBQUssR0FBRyxRQUFRLEVBQUU7UUFDbEIsT0FBTztLQUNWO0lBQ0QsTUFBTSxJQUFJLEdBQVcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQztJQUN6RSxJQUFJLEdBQVcsQ0FBQztJQUNoQixRQUFRLElBQUksRUFBRTtRQUNWLEtBQUssUUFBUSxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsSUFBSSxRQUFRLEdBQUcsQ0FBQztZQUN0QixNQUFNO1NBQ1Q7UUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ1YsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1lBQzNCLEtBQUssSUFBSSxJQUFJLElBQUksUUFBUSxFQUFFO2dCQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUM7WUFDRCxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDOUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxRQUFRLENBQUMsQ0FBQztZQUNYLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQztZQUMzQixLQUFLLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRTtnQkFDdEIsS0FBSyxDQUFDLElBQUksQ0FDTixHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FDdEMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUNiLEtBQUssR0FBRyxDQUFDLENBQ1osRUFBRSxDQUNOLENBQUM7YUFDTDtZQUNELEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNyQyxNQUFNO1NBQ1Q7UUFDRDtZQUNJLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFFRCxlQUFlLElBQUksT0FBTyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLEVBQUU7SUFDUixJQUFJLEVBQUU7UUFDRjtZQUNJLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLE1BQU0sRUFBRSwrQ0FBK0M7U0FDMUQ7S0FDSjtJQUNELFVBQVUsRUFBRSxLQUFLO0lBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDeEM7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQzlELEdBQUcsRUFDSCxDQUFDLENBQ0osRUFBRSxDQUFDO1FBRUosS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsYUFBYSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQgeyBNaXNzaW5nQXJnIH0gZnJvbSBcIi4uLy4uL2NsYXNzZXMvRXhjZXB0aW9uXCI7XG5pbXBvcnQgR3VpbGQgZnJvbSBcIi4uLy4uL2NsYXNzZXMvR3VpbGRcIjtcbmltcG9ydCBTYWx0eSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9TYWx0eVwiO1xuaW1wb3J0IFVzZXIgZnJvbSBcIi4uLy4uL2NsYXNzZXMvVXNlclwiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmNvbnN0IE1BWERFUFRIID0gMztcblxuLy8gQXZvaWQgbGludGVyIHRvIGNvbnNpZGVyIHRoZXNlIHVzZWxlc3NcbigoYSwgYikgPT4gbnVsbCkoR3VpbGQsIFVzZXIpO1xuXG5mdW5jdGlvbiBnZXRGb3JtYXQodmFyaWFibGU6IGFueSwgZGVwdGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGRlcHRoID4gTUFYREVQVEgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0eXBlOiBzdHJpbmcgPSBBcnJheS5pc0FycmF5KHZhcmlhYmxlKSA/IFwiYXJyYXlcIiA6IHR5cGVvZiB2YXJpYWJsZTtcbiAgICBsZXQgcmVzOiBzdHJpbmc7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjoge1xuICAgICAgICAgICAgcmVzID0gYFwiJHt2YXJpYWJsZX1cImA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYXJyYXlcIjoge1xuICAgICAgICAgICAgY29uc3QgaXRlbXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHZhcmlhYmxlKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChnZXRGb3JtYXQoaXRlbSwgZGVwdGggKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMgPSBgWyR7aXRlbXMuam9pbihcIiwgXCIpfV1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB2YXJpYWJsZSkge1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIGAke2dldEZvcm1hdChrZXksIGRlcHRoICsgMSl9OiAke2dldEZvcm1hdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlW2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXB0aCArIDFcbiAgICAgICAgICAgICAgICAgICAgKX1gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcyA9IGB7XFxuJHtpdGVtcy5qb2luKFwiLFxcblxcdFwiKX1cXG59YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXMgPSBTdHJpbmcodmFyaWFibGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29tbWFuZCh7XG4gICAgbmFtZTogXCJkZWJ1Z1wiLFxuICAgIGtleXM6IFtdLFxuICAgIGhlbHA6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwiKioqSlMgY29kZSoqKlwiLFxuICAgICAgICAgICAgZWZmZWN0OiBcIkV4ZWN1dGVzIGEgKioqSlMgY29kZSoqKiB3aXRoaW4gU2FsdHkgY29udGV4dFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdmlzaWJpbGl0eTogXCJkZXZcIixcbiAgICBhc3luYyBhY3Rpb24obXNnLCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJnc1swXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdBcmcoXCJpbnN0cnVjdGlvbnNcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBldmFsKGFyZ3Muam9pbihcIiBcIikpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7YXJncy5qb2luKFwiIFwiKX0gPSAvKiR7dHlwZW9mIHJlc30qLyAke2dldEZvcm1hdChcbiAgICAgICAgICAgIHJlcyxcbiAgICAgICAgICAgIDBcbiAgICAgICAgKX1gO1xuXG4gICAgICAgIFNhbHR5Lm1lc3NhZ2UobXNnLCBgXFxgXFxgXFxganNcXG4ke21lc3NhZ2Uuc2xpY2UoMCwgMTk1MCl9XFxuXFxgXFxgXFxgYCk7XG4gICAgICAgIGxvZyhtZXNzYWdlKTtcbiAgICB9LFxufSk7XG4iXX0=