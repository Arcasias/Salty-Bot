import Command from "../../classes/Command";
import Salty from "../../classes/Salty";
import { error } from "../../utils";
import { IncorrectValue, SaltyException } from "../../classes/Exception";
let purging = false;
async function purgeEndless(channel) {
    const messages = await channel.messages.fetch({ limit: 1 });
    if (!purging) {
        return;
    }
    await messages.first().delete();
    return purgeEndless(channel);
}
export default new Command({
    name: "purge",
    keys: ["prune"],
    help: [
        {
            argument: null,
            effect: "Deletes the last 100 messages",
        },
        {
            argument: "***amount***",
            effect: "Deletes the last ***amount*** messages",
        },
        {
            argument: "bot",
            effect: "Deletes the last 100 messages sent by a bot",
        },
        {
            argument: "endless",
            effect: "Recursively deletes every message one by one in the current channel. Use carefully.",
        },
        {
            argument: "clear",
            effect: "Used to stop the endless purge",
        },
    ],
    visibility: "dev",
    async action(msg, args) {
        switch (this.meaning(args[0])) {
            case "bot":
                const messages = await msg.channel.messages.fetch();
                let messagesToDelete = messages.filter((message) => message.author.bot);
                try {
                    await msg.channel.bulkDelete(messagesToDelete);
                    await Salty.success(msg, "most recent bot messages have been deleted");
                }
                catch (err) {
                    error(err);
                }
                break;
            case "clear":
                if (purging) {
                    purging = false;
                    Salty.success(msg, "purge stopped");
                }
                else {
                    Salty.error(msg, "i wasn't purging anything");
                }
                break;
            case "string":
                if (args[0] === "endless") {
                    purging = true;
                    return purgeEndless(msg.channel);
                }
            /* falls through */
            default:
                if (isNaN(args[0])) {
                    throw new IncorrectValue("length", "number");
                }
                if (parseInt(args[0]) === 0) {
                    throw new SaltyException("you must delete at least 1 message");
                }
                const toDelete = Math.min(parseInt(args[0]), 100) || 100;
                try {
                    await msg.channel.bulkDelete(toDelete, true);
                    await Salty.success(msg, `${toDelete} messages have been successfully deleted`);
                }
                catch (err) {
                    error(err);
                }
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvY29uZmlnL3B1cmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sT0FBTyxNQUFNLHVCQUF1QixDQUFDO0FBQzVDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RSxJQUFJLE9BQU8sR0FBWSxLQUFLLENBQUM7QUFFN0IsS0FBSyxVQUFVLFlBQVksQ0FBQyxPQUFPO0lBQy9CLE1BQU0sUUFBUSxHQUFjLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1YsT0FBTztLQUNWO0lBQ0QsTUFBTSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELGVBQWUsSUFBSSxPQUFPLENBQUM7SUFDdkIsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFDZixJQUFJLEVBQUU7UUFDRjtZQUNJLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLCtCQUErQjtTQUMxQztRQUNEO1lBQ0ksUUFBUSxFQUFFLGNBQWM7WUFDeEIsTUFBTSxFQUFFLHdDQUF3QztTQUNuRDtRQUNEO1lBQ0ksUUFBUSxFQUFFLEtBQUs7WUFDZixNQUFNLEVBQUUsNkNBQTZDO1NBQ3hEO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsU0FBUztZQUNuQixNQUFNLEVBQ0YscUZBQXFGO1NBQzVGO1FBQ0Q7WUFDSSxRQUFRLEVBQUUsT0FBTztZQUNqQixNQUFNLEVBQUUsZ0NBQWdDO1NBQzNDO0tBQ0o7SUFDRCxVQUFVLEVBQUUsS0FBSztJQUNqQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ2xCLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMzQixLQUFLLEtBQUs7Z0JBQ04sTUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDcEQsSUFBSSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUNsQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQ2xDLENBQUM7Z0JBQ0YsSUFBSTtvQkFDQSxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQy9DLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FDZixHQUFHLEVBQ0gsNENBQTRDLENBQy9DLENBQUM7aUJBQ0w7Z0JBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNkO2dCQUNELE1BQU07WUFDVixLQUFLLE9BQU87Z0JBQ1IsSUFBSSxPQUFPLEVBQUU7b0JBQ1QsT0FBTyxHQUFHLEtBQUssQ0FBQztvQkFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7aUJBQ3ZDO3FCQUFNO29CQUNILEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDJCQUEyQixDQUFDLENBQUM7aUJBQ2pEO2dCQUNELE1BQU07WUFDVixLQUFLLFFBQVE7Z0JBQ1QsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUN2QixPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUNmLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEM7WUFDTCxtQkFBbUI7WUFDbkI7Z0JBQ0ksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hCLE1BQU0sSUFBSSxjQUFjLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUNoRDtnQkFDRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3pCLE1BQU0sSUFBSSxjQUFjLENBQ3BCLG9DQUFvQyxDQUN2QyxDQUFDO2lCQUNMO2dCQUNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztnQkFDekQsSUFBSTtvQkFDQSxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDN0MsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUNmLEdBQUcsRUFDSCxHQUFHLFFBQVEsMENBQTBDLENBQ3hELENBQUM7aUJBQ0w7Z0JBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNkO1NBQ1I7SUFDTCxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgQ29tbWFuZCBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9Db21tYW5kXCI7XG5pbXBvcnQgU2FsdHkgZnJvbSBcIi4uLy4uL2NsYXNzZXMvU2FsdHlcIjtcbmltcG9ydCB7IGVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyBJbmNvcnJlY3RWYWx1ZSwgU2FsdHlFeGNlcHRpb24gfSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9FeGNlcHRpb25cIjtcblxubGV0IHB1cmdpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuYXN5bmMgZnVuY3Rpb24gcHVyZ2VFbmRsZXNzKGNoYW5uZWwpIHtcbiAgICBjb25zdCBtZXNzYWdlczogTWVzc2FnZVtdID0gYXdhaXQgY2hhbm5lbC5tZXNzYWdlcy5mZXRjaCh7IGxpbWl0OiAxIH0pO1xuICAgIGlmICghcHVyZ2luZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IG1lc3NhZ2VzLmZpcnN0KCkuZGVsZXRlKCk7XG4gICAgcmV0dXJuIHB1cmdlRW5kbGVzcyhjaGFubmVsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbW1hbmQoe1xuICAgIG5hbWU6IFwicHVyZ2VcIixcbiAgICBrZXlzOiBbXCJwcnVuZVwiXSxcbiAgICBoZWxwOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBudWxsLFxuICAgICAgICAgICAgZWZmZWN0OiBcIkRlbGV0ZXMgdGhlIGxhc3QgMTAwIG1lc3NhZ2VzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcIioqKmFtb3VudCoqKlwiLFxuICAgICAgICAgICAgZWZmZWN0OiBcIkRlbGV0ZXMgdGhlIGxhc3QgKioqYW1vdW50KioqIG1lc3NhZ2VzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBcImJvdFwiLFxuICAgICAgICAgICAgZWZmZWN0OiBcIkRlbGV0ZXMgdGhlIGxhc3QgMTAwIG1lc3NhZ2VzIHNlbnQgYnkgYSBib3RcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwiZW5kbGVzc1wiLFxuICAgICAgICAgICAgZWZmZWN0OlxuICAgICAgICAgICAgICAgIFwiUmVjdXJzaXZlbHkgZGVsZXRlcyBldmVyeSBtZXNzYWdlIG9uZSBieSBvbmUgaW4gdGhlIGN1cnJlbnQgY2hhbm5lbC4gVXNlIGNhcmVmdWxseS5cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXJndW1lbnQ6IFwiY2xlYXJcIixcbiAgICAgICAgICAgIGVmZmVjdDogXCJVc2VkIHRvIHN0b3AgdGhlIGVuZGxlc3MgcHVyZ2VcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHZpc2liaWxpdHk6IFwiZGV2XCIsXG4gICAgYXN5bmMgYWN0aW9uKG1zZywgYXJncykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMubWVhbmluZyhhcmdzWzBdKSkge1xuICAgICAgICAgICAgY2FzZSBcImJvdFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgbXNnLmNoYW5uZWwubWVzc2FnZXMuZmV0Y2goKTtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZXNUb0RlbGV0ZSA9IG1lc3NhZ2VzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgKG1lc3NhZ2UpID0+IG1lc3NhZ2UuYXV0aG9yLmJvdFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbXNnLmNoYW5uZWwuYnVsa0RlbGV0ZShtZXNzYWdlc1RvRGVsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgU2FsdHkuc3VjY2VzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibW9zdCByZWNlbnQgYm90IG1lc3NhZ2VzIGhhdmUgYmVlbiBkZWxldGVkXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2xlYXJcIjpcbiAgICAgICAgICAgICAgICBpZiAocHVyZ2luZykge1xuICAgICAgICAgICAgICAgICAgICBwdXJnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIFNhbHR5LnN1Y2Nlc3MobXNnLCBcInB1cmdlIHN0b3BwZWRcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgU2FsdHkuZXJyb3IobXNnLCBcImkgd2Fzbid0IHB1cmdpbmcgYW55dGhpbmdcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGlmIChhcmdzWzBdID09PSBcImVuZGxlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICBwdXJnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1cmdlRW5kbGVzcyhtc2cuY2hhbm5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluY29ycmVjdFZhbHVlKFwibGVuZ3RoXCIsIFwibnVtYmVyXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoYXJnc1swXSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNhbHR5RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ5b3UgbXVzdCBkZWxldGUgYXQgbGVhc3QgMSBtZXNzYWdlXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdG9EZWxldGUgPSBNYXRoLm1pbihwYXJzZUludChhcmdzWzBdKSwgMTAwKSB8fCAxMDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbXNnLmNoYW5uZWwuYnVsa0RlbGV0ZSh0b0RlbGV0ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IFNhbHR5LnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2csXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHt0b0RlbGV0ZX0gbWVzc2FnZXMgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBkZWxldGVkYFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG59KTtcbiJdfQ==