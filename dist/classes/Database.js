"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("pg");
const utils_1 = require("../utils");
const SEPARATOR = "//";
const SEPARATOR_REGEX = new RegExp(SEPARATOR);
let client;
function formatValues(values) {
    for (const key in values) {
        if (Array.isArray(values[key])) {
            values[key] = values[key].join(SEPARATOR);
        }
    }
    return values;
}
function parseResult({ rows }) {
    for (const row of rows) {
        for (const key in row) {
            if (typeof row[key] === "string" &&
                SEPARATOR_REGEX.test(row[key])) {
                row[key] = row[key].split(SEPARATOR);
            }
        }
    }
    return rows;
}
function sanitizeTable(table) {
    return table.toLowerCase().replace(/[^a-z_]/g, "");
}
async function connect() {
    if (!client) {
        client = new pg_1.Client({
            database: process.env.DATABASE_DATABASE,
            host: process.env.DATABASE_HOST,
            password: process.env.DATABASE_PASSWORD,
            port: Number(process.env.DATABASE_PORT),
            user: process.env.DATABASE_USER,
            ssl: { rejectUnauthorized: false },
        });
    }
    try {
        await client.connect();
    }
    catch (err) {
        utils_1.error(err.stack);
    }
}
exports.connect = connect;
async function disconnect() {
    try {
        await client.end();
    }
    catch (err) {
        utils_1.error(err.stack);
    }
}
exports.disconnect = disconnect;
async function create(table, ...allValues) {
    const queryArray = ["INSERT INTO", sanitizeTable(table)];
    const variables = [];
    let varCount = 0;
    queryArray.push(`(${Object.keys(allValues[0]).join()}) VALUES`);
    const allFormattedValues = [];
    allValues.forEach((values) => {
        const formattedValues = formatValues(values);
        allFormattedValues.push(`(${Object.values(formattedValues)
            .map(() => `$${++varCount}`)
            .join()})`);
        variables.push(...Object.values(formattedValues));
    });
    queryArray.push(allFormattedValues.join());
    queryArray.push("RETURNING *");
    console.log({ variables: variables.join() });
    const query = queryArray.join(" ") + ";";
    utils_1.debug({ query }, variables);
    try {
        return [];
        const result = await client.query(query, variables);
        utils_1.log(`${result.rows.length} record(s) of type "${table}" created.`);
        return parseResult(result);
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
exports.create = create;
async function remove(table, ids) {
    const queryArray = ["DELETE FROM", sanitizeTable(table)];
    const variables = [];
    let varCount = 0;
    if (!Array.isArray(ids)) {
        ids = [ids];
    }
    queryArray.push(`WHERE id IN (${ids.map(() => `$${++varCount}`)}) RETURNING *;`);
    variables.push(...ids);
    const query = queryArray.join(" ") + ";";
    utils_1.debug({ query }, variables);
    try {
        const result = await client.query(query, variables);
        utils_1.log(`${result.rows.length} record(s) of type "${table}" removed.`);
        return parseResult(result);
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
exports.remove = remove;
async function read(table, where, fields) {
    const queryArray = ["SELECT"];
    const variables = [];
    let varCount = 0;
    if (fields) {
        if (!fields.includes("id")) {
            fields.unshift("id");
        }
        queryArray.push(fields.map(() => `$${++varCount}`).join());
        variables.push(...fields);
    }
    else {
        queryArray.push("*");
    }
    queryArray.push(`FROM ${sanitizeTable(table)}`);
    if (where) {
        const whereString = [];
        for (const key in where) {
            if (Array.isArray(where[key])) {
                const values = where[key].map(() => `$${++varCount}`);
                whereString.push(`${key} IN (${values})`);
                variables.push(...where[key]);
            }
            else if (typeof key === "string") {
                whereString.push(`${key} = $${++varCount}`);
                variables.push(where[key]);
            }
        }
        queryArray.push("WHERE", whereString.join(" AND "));
    }
    const query = queryArray.join(" ") + ";";
    utils_1.debug({ query }, variables);
    try {
        const result = await client.query(query, variables);
        return parseResult(result);
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
exports.read = read;
async function update(table, ids, values) {
    const queryArray = ["UPDATE", sanitizeTable(table), "SET"];
    const variables = [];
    let varCount = 0;
    if (!Array.isArray(ids)) {
        ids = [ids];
    }
    const valuesArray = [];
    const formattedValues = formatValues(values);
    for (let fieldName in formattedValues) {
        valuesArray.push(`${fieldName}=$${++varCount}`);
        variables.push(formattedValues[fieldName]);
    }
    queryArray.push(valuesArray.join());
    queryArray.push(`WHERE id IN (${ids.map(() => `$${++varCount}`)}) RETURNING *;`);
    variables.push(...ids);
    const query = queryArray.join(" ") + ";";
    utils_1.debug({ query }, variables);
    try {
        const result = await client.query(query, variables);
        utils_1.log(`${result.rows.length} record(s) of type "${table}" updated.`);
        return result.rows;
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
exports.update = update;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xhc3Nlcy9EYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUF5RDtBQUV6RCxvQ0FBNkM7QUFFN0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLE1BQU0sZUFBZSxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLElBQUksTUFBYyxDQUFDO0FBTW5CLFNBQVMsWUFBWSxDQUFDLE1BQXdCO0lBQzFDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3RCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM3QztLQUNKO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFlO0lBQ3RDLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3BCLEtBQUssTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFO1lBQ25CLElBQ0ksT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUTtnQkFDNUIsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDaEM7Z0JBQ0UsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDeEM7U0FDSjtLQUNKO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEtBQWE7SUFDaEMsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxD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