"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("pg");
const utils_1 = require("../utils");
let client;
function _sanitizeTable(table) {
    return table.toLowerCase().replace(/[^a-z_]/g, "");
}
async function connect() {
    if (!client) {
        client = new pg_1.Client({
            database: process.env.DATABASE_DATABASE,
            host: process.env.DATABASE_HOST,
            password: process.env.DATABASE_PASSWORD,
            port: Number(process.env.DATABASE_PORT),
            user: process.env.DATABASE_USER,
            ssl: { rejectUnauthorized: false },
        });
    }
    try {
        await client.connect();
    }
    catch (err) {
        utils_1.error(err.stack);
    }
}
async function disconnect() {
    try {
        await client.end();
    }
    catch (err) {
        utils_1.error(err.stack);
    }
}
async function create(table, ...allValues) {
    const queryString = ["INSERT INTO", _sanitizeTable(table)];
    const variables = [];
    let varCount = 0;
    queryString.push(`(${Object.keys(allValues[0]).join()}) VALUES`);
    const allFormattedValues = [];
    allValues.forEach((values) => {
        allFormattedValues.push(`(${Object.values(values)
            .map(() => `$${++varCount}`)
            .join()})`);
        variables.push(...Object.values(values));
    });
    queryString.push(allFormattedValues.join());
    queryString.push("RETURNING *;");
    utils_1.debug({ query: queryString.join(" ") }, variables);
    try {
        const result = await client.query(queryString.join(" "), variables);
        utils_1.log(`${result.rows.length} record(s) of type "${table}" created.`);
        return result.rows;
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
async function remove(table, ids) {
    const queryString = ["DELETE FROM", _sanitizeTable(table)];
    const variables = [];
    let varCount = 0;
    if (!Array.isArray(ids)) {
        ids = [ids];
    }
    queryString.push(`WHERE id IN (${ids.map(() => `$${++varCount}`)}) RETURNING *;`);
    variables.push(...ids);
    utils_1.debug({ query: queryString.join(" ") }, variables);
    try {
        const result = await client.query(queryString.join(" "), variables);
        utils_1.log(`${result.rows.length} record(s) of type "${table}" removed.`);
        return result.rows;
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
async function read(table, ids, fields) {
    const queryString = ["SELECT"];
    const variables = [];
    let varCount = 0;
    if (fields) {
        if (!fields.includes("id")) {
            fields.unshift("id");
        }
        queryString.push(fields.map(() => `$${++varCount}`).join());
        variables.push(...fields);
    }
    else {
        queryString.push("*");
    }
    queryString.push(`FROM ${_sanitizeTable(table)}`);
    if (ids) {
        if (!Array.isArray(ids)) {
            ids = [ids];
        }
        queryString.push(`WHERE id IN (${ids.map(() => `$${++varCount}`)});`);
        variables.push(...ids);
    }
    utils_1.debug({ query: queryString.join(" ") }, variables);
    try {
        const result = await client.query(queryString.join(" "), variables);
        return result.rows;
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
async function update(table, ids, values) {
    const queryString = ["UPDATE", _sanitizeTable(table), "SET"];
    const variables = [];
    let varCount = 0;
    if (!Array.isArray(ids)) {
        ids = [ids];
    }
    const valuesArray = [];
    for (let fieldName in values) {
        valuesArray.push(`${fieldName}=$${++varCount}`);
        variables.push(values[fieldName]);
    }
    queryString.push(valuesArray.join());
    queryString.push(`WHERE id IN (${ids.map(() => `$${++varCount}`)}) RETURNING *;`);
    variables.push(...ids);
    utils_1.debug({ query: queryString.join(" ") }, variables);
    try {
        const result = await client.query(queryString.join(" "), variables);
        utils_1.log(`${result.rows.length} record(s) of type "${table}" updated.`);
        return result.rows;
    }
    catch (err) {
        utils_1.error(err.stack);
        return [];
    }
}
exports.default = {
    connect,
    create,
    disconnect,
    remove,
    read,
    update,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xhc3Nlcy9EYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUF5RDtBQUN6RCxvQ0FBNkM7QUFJN0MsSUFBSSxNQUFjLENBQUM7QUFFbkIsU0FBUyxjQUFjLENBQUMsS0FBYTtJQUNqQyxPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRCxLQUFLLFVBQVUsT0FBTztJQUNsQixJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1QsTUFBTSxHQUFHLElBQUksV0FBTSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQjtZQUN2QyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhO1lBQy9CLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQjtZQUN2QyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDO1lBQ3ZDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWE7WUFDL0IsR0FBRyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFO1NBQ3JDLENBQUMsQ0FBQztLQUNOO0lBQ0QsSUFBSTtRQUNBLE1BQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzFCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixhQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVO0lBQ3JCLElBQUk7UUFDQSxNQUFNLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN0QjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsYUFBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNw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